
KERNEL DOCUMENTATION

    https://tldp.org
    https://www.kernel.org/doc/html/latest/
    https://www.kernel.org/doc/Documentation/

KERNEL PARAMETERS

    /proc/sys/*         = path to defaults
    sysctl              = cli utility for managing: get and temporarily set values inside /proc/sys/*
    /etc/sysctl.conf    = permanent set values: apply values on system start

UTILITIES

    iproute2 package    = network internal information:  ip / tc / ss / bridge / etc.
    nstat               = network raw statistics
    netstat             = TCP FSM states
    sysctl              = kernel information
    tcpdump             = dump network traffic
    ssh, telnet         = remote connection     

* * *

TCP/IP MODEL

    [A] = APPLICATION   <...>
    [T] = TRANSPORT     TCP, UDP, <...>         segment, datagram
    [I] = INTERNET      IPv4/6, <...>           packet
    [L] = LINK          <...>                   unit

MODEL PARAMETERS

    --- LINK --------

    MTU (maximum transmission unit)
    
        - maximum size of unit which can be processed in a single transaction
        - PMTU = path MTU = MTU for entire network path between two peers
        - get MTU:
            for host interface: `ip a | grep mtu`
            for entire path: PMTU Discovery

        <how host knows MTU of other host?>
        https://networkengineering.stackexchange.com/a/76462

    --- INTERNET ----

    MINIMUM REASSEMBLY BUFFER SIZE

        minimum IP PACKET size that any node  
            - must be able to handle in one fragment or
            - does best efforts to reassemble it from smaller ones
        Dafaults:
            IPv4 =  576 octets   [RFC 0879]
            IPv6 = 1500 octets   [RFC 1883]

    MINIMUM FRAGMENTATION SIZE (also called IP MTU)

        minimum IP FRAGMENT size that each node must be able 
        to handle without further fragmentation. Dafaults:
            IPv4 =   68 octets   [RFC 0791]  - actual value usually is greater
            IPv6 = 1280 octets   [RFC 2460]  - actual value usually is the same     

    --- TRANSPORT ---

    TCP PORTS

                                IANA                                    UNIX

            0 ..  1023      well-known, approval required           reserved, sudo required       
         1024 .. 49151      registered, list fot conviniency        -, free to use
        49152 .. 65535      private, custom usage                   -, free to use

* * *

TCP STATES 

    enum = https://elixir.bootlin.com/linux/latest/source/include/net/tcp_states.h
    EFSM = https://www.medianet.cs.kent.edu/techreports/TR2005-07-22-tcp-EFSM.pdf\
    diagnostic (tcp_diag) = https://stackoverflow.com/questions/8236574/how-do-i-use-tcp-diag-with-c

TCP HEADER

    PORT, sender              16
    PORT, receiver            16
  +------------------------------+
    NUMBER, sequence          32        = if ACK without data, value is unchanged comparing last segment with data
    NUMBER, acknowledged      32        
  +------------------------------+
    HEADER LENGTH              4
    RESERVED                   4
    BITS                       8        = including: SYN, ACK, FIN, RST
    WINDOW SIZE               16        = refers to receiver advertized window, see "TCP RECEIVER BUFFER SIZE"
    CHECKSUM                  16
    URGENT POINTER            16
  +------------------------------+ 
                     = 20 octets
        +
    OPTIONS               0..320
    PADDING                to 32
    DATA              0..8*65535        = see "TCP DATA MAX SIZE"

TCP OPTIONS

    MSS (maximum segment size) =

        - maximum size (in octets) which receiver can handle in a separate TCP segment
        - established independently for both sides in SYN segments
        - counting:
            PMTU - IP_header - TCP_header
            if no MSS received from partner peer, default value is used:
                IPv4 = 536 = 576 - 20 - 20          // refers to IPv4 MINIMUM REASSEMBLY BUFFER SIZE
                IPv6 = 1220 = 1280 - 40 - 20        // refers to IPv6 MINIMUM FRAGMENTATION SIZE
        - sender may send segments less than or equal to MSS established by receiver

    WINDOW SCALE OPTION = [RFC 1323]

    TIMESTAMP OPTION = [RFC 1323]

* * *

TCP DATA MAX SIZE

    if IPv4  >>  IP data max = 65515 (65535 - IP header)      >>  TCP data max = 65495 (65515 - TCP header) 
    if IPv6  >>  IP data max = 65535 (header is independent)  >>  TCP data nax = 65515 (65635 - TCP header)

TCP RECEIVER BUFFER SIZE

    RELATED VALUES

        rmem_max            Kernel level restriction       = /proc/sys/net/core/rmem_max
        tcp_rmem            TCP level (min default max)    = [man 7 socket], get: /proc/sys/net/ipv4/tcp_rmem 
        SO_RCVBUF           particular socket size         = [man 7 socket], get: [man 8 ss] >> Options >> --memory

    BUFFER STRUCTURE

             DATA ITSELF
        /                     \
        +----------------------+----------------------+
        |       RECV-Q         |       METADATA       |
        +----------------------+----------------------+
        |  ADVERTIZED WINDOW   |       RESERVED       |
        +----------------------+----------------------+
        \                                            /
                    TECHNICALLY 'FREE' SPACE


        TOTAL SIZE
        
            If set manually from user space = (2 * SO_RCVBUF)
            Otherwise is regulated by TCP AUTOTUNE MECHANISM
        
        DESCRIPTION

            RECV-Q + METADATA = actually used memory. Get value: `ss --memory` >> 'skmem_r' value
            ADVERTIZED WINDOW + RESERVED = currently technically free memory

            - RECV-Q        TCP needs:      data were received by TCP and is waiting for application to be read()
            - METADATA      Kernel needs:   information about how data placed in memory (struct sk_buff), etc.
            - ADV. WINDOW   window size to be written to TCP header as 'Window size'
            - RESERVED      will be used in future for either data or metadata

    ADVERTIZED WINDOW SIZE MANAGEMENT

        In vanilla Linux kernel advertied window size:
            is set to some little value at the receiving beginning ...
            ... and then optimized:
                increases - so long as it might be increased
                decreases - as data arrives and if free space is not enough for next portion of data
    
        Advertized window UPPER BOUND is limited by:
            tcp_adv_win_scale       TCP level               = % of free space to be used for advertizing, [man 7 tcp]. Get: /proc/sys/net/ipv4/tcp_adv_win_scale
            rcv_ssthresh            TCP level, sourcecode   = internal, see: include/linux/tcp.h:240 and tcp-related references <?>
            TCP_WINDOW_CLAMP        particular socket       = [man 7 tcp]

    METADATA REDUCTION MECHANISMS 
        
        To reduce the metadata memory usage kernel applies 2 mechanisms:
        
        COALESCE = during receiving
            - link data to the previously enqueded packet
            - throw new metadata structure away
        
        COLLAPSE = when the memory budget is hit
            - defragment the receiver buffer
            - rewrite many short segments to several long ones

    / Notes /


        *   it seems that `[man 7 socket]` description of SO_RCVBUF is incorrect:
            man: "... the maximum allowed value is set by the /proc/sys/net/core/rmem_max file"
            reality: almost entire TCP core code refers to /proc/sys/net/ipv4/tcp_rmem only
            read: https://stackoverflow.com/a/35438236

TCP SENDER WINDOW SIZE = derivative of:

    1. receiver window size = how much data receiver can handle

        - mechanism name:   flow control
        - the purpose:      to avoid receiver buffer overflow
        - estimation:       receiver set value to TCP header 'Window size' field
        - value:            read 'TCP receiver window size' in this doc
        - get value:        dump TCP segment [man 8 tcpdump]

    2. congestion window size = how much data the network can transfer

        - mechanism name:   congestion control
        - the purpose:      to avoid network overloading
        - estimation:       sender uses congestion control algorithms (CCA) 
        - value:            greater than maximum segment size (MSS) allowed by receiver     
        - get value:        dump socket statistics ([man 8 ss] >> -i option, 'cwnd' field)

    SENDER WINDOW SIZE
    
        - the samellest of receiver and congestion window
        - vs. MTU =  <...>

    DATA IN FLIGHT = the data have been sent but not acknowledged

TCP SENDER BUFFER PROCESSING

    1. [A] writes data to socket
    2. [T] 
            - takes data from socket to internal buffer
            - split them into SEGMENTS
            - send to a [I]
            - wait for ACK 
            - remove acknowledged data from internal buffer
    
    BLOCKING MODE
        
        - [A] and [T] executed sequentially / although [T] is managed by OS in different thread
        - [T] returns control to [A] after all data are copied from socket to [T] sender buffer
    
    NON-BLOCKING MODE

        <...>

* * *

TCP TIMERS

                                START VALUE                 INCREASING              TRIES                   COMMENT

    1 - SYN retransmition       hardcoded to 1              t ~ t*2                 tcp_syn_retries         time waiting before retrying SYN sending
    2 - Retransmission          based on RTT, [RFC 793]     up to hardcoded         tcp_retries1,2          current = `ss -i`, change min per route = `ip route change <route> rto_min <n>ms`         
    3 - Persistent              ...                         ...                     ...                     send Probe segment of 1 byte after getting 0 in Window size header field
    4 - Keep Alive              tcp_keepalive_intvl         same for all probes     tcp_keepalive_probes    tcp_keepalive_time = time after last received segment to send first keepalive probe
    5 - FIN                     tcp_fin_timeout             ...                     works only once         time waiting final FIN from parter
    6 - Time Wait               tcp_tw_timeout              ...                     works only once         time waiting in TIME_WAIT state
    7. ...

* * *

List of terms to be studied

    RTT (round-trip delay) = <...>

    TCP delayed acknowledgment = <...>

    MSL (minimum segment lifetime) = <...>

List of questions to be answered:
    -        use socket(..., ... | SOCK_NONBLOCK, ...) with 'poll' on 'connect'
    2.4      how to set connection/response timeout for TCP + how TCP predicts Round-trip time (RTT)
    2.6      how TRANSPORT layer (e.g. TCP) parameters connected with APPLICATION layer experience?
    -        local vs. external IP in context of bind() function and 'ifconfig' utility

* * *

Search in this document for

    <?>    all not fully got details  
    <...>  no information studied

Additional literature

    Richard Stevens - TCP/IP Illustrated, Vol. 1: The Protocols
