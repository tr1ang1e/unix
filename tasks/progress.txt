   ?  questions to resolve
      - send pid of cloned process with flag CLONE_PARENT to new actual parent ?
      - draw a diagram consists of the elements: SID (session) , PID (process) , TID (thread)


   0. different features
      [a] clean_code_utils.h
      [b] enum_array.c


   1. c-programm, 1 file
   2. c-programm, main + (header, unit) files


   3. c-programm, main + (dinamic library = so) / compiletime shared library linkage
      [a] gcc -shared -fPIC ./source/c/unit.c -o ./lib/shared/libunit.so    # compile programm unit to shared library
      [b] gcc main.c -L./lib/shared -lunit                                  # -L<path> = path to .so, -l<name> = name of .so  
      [c] export LD_LIBRARY_PATH=./lib/shared/                              # before run programm = temporarily set path to shared library for OS

      ~ ldd <programm>   # programm dependencies of dynamic libraries


   4. c-program, main + (static library = a)
      [a] gcc -c ./source/c/unit.c -o ./source/c/unit.o                     # compile programm unit to object file 
      [b] ar rcs ./lib/static/libunit.a ./source/c/unit.o                   # pack .o into static library (might be several .o files simultaneously)
      [c] rm ./source/c/unit.o                                              # (optional) remove .o file
      [d] gcc main.c -L./lib/static -lunit                                  # -L<path> = path to .a, -l<name> = name of .a 


   5. makefile
      [a] syntax = target: dependencies
      [b] usage = make <target>
      [c] additional = 
         .PHONY                                          # target that doesn't name a file  
         <command>     ( without target and tab )        # will be executed independently
         CC=gcc        ( without target and tab )        # usage = $(CC)
      [d] attention ! every command executes in separate shell ! might be changed using .ONESHELL


   6. c-programm, main + (dinamic library = so) / runtime shared library linkage
      [a] gcc -shared -fPIC ./source/c/unit.c -o ./lib/shared/libunit.so               # compile programm unit to shared library
      [b] gcc main.c -ldl                                                              # dl = special system library for runtime linkage (dlopen, dlsym)  
      
      > attention ! if there are only lib name (not path) in dlopen(...) , should :  
        or use environment variable  =  `export LD_LIBRARY_PATH=<path>` 
        or set gcc linker flags      =  gcc ...  -Wl,-rpath,<path> ...                                            
        or follow instructions:
           ~ cat /etc/ld.so.conf     # will see 'include <path>'      = path to .conf files, using by system to find .so
           ~ cd <path> && ls         # will see list of .conf files   = every .conf describes path to directories with .so files
           > varinats:
             or add your own .conf file with path to dir with your .so
             or put your .so to one of the dirs, described in one of the existing .conf files     


   7. files and filsystem

      all of manuals are in `man man`

      file = named part of disk memory
      file = system interface (memory for data exchange)

            /path/to/file
            [    data   ]  >>  metadata:
                              - date, time (create, changed ...) 
                              - rights
                              - size 
                              - ...

      info about file: stat <filepath>

      all of system calls are in `man 2 <syscall>`
      most important in this context: 
         > create and delete files    =  creat, unlink
         > work inside file           =  open, close, read, write, lseek
         > work with file descriptor  =  fctrl 
      
      directory = file of special format, including metadata of inner files and directories

      all of library calls are in `man 3 <libcall>`
      most important in this context:
         > open directory          =  opendir, fdopendir
         > get information         =  readdir
         > close directory         =  closedir

         example:

               #include <sys/stat.h>
               #include <dirent.h> 
               
               struct dirent *de = malloc(sizeof(struct dirent)); 
               struct stat *info; = malloc(sizeof(struct stat));

               DIR *dr = opendir(<dirpath>); 

               if (dr == NULL) 
               { 
                  ...
               } 
               else
               {
                  while ((de = readdir(dr)) != NULL) 
                  {
                     ...
                  }
               }

               closedir(dr);  

      link types:
      > hardlink (type = file)
         - same inode
         - both of links might be placed in any filsystem's place
         - file exists while exists at least one hardlink
         = the same file (extension of file names list) !
      > symlink (type = symbolic link) 
         - differ inode
         - if source file will be replaced, link will be broken
         - file existance independent of symlink
         = access to source file by name = not by inode !
      
      procfs (processes filesystem) = processes + equipment

         > man 1 ltrace = trace library calls
         > man 1 strace = trace system calls
         > man 1 pstree = processes tree

         > procfs =
                         interface
         1.  run process o-------<  (syscall) KERNEL ( processes handle ) >> run PROCESS ( unique PID ) 
         2.  KERNEL  >>  PROCFS drivers  >> create PROCESS FILES ( /proc/PID/file* )                                          
         3.  PROCESS FILES = process interface 
         4.  command( PID, args ) o-------< (syscall) KERNEL o-------<  PROCFS o-------< PROCESS


   8. processes, basics

      process = unit of planning (!)
         + threads
         + memory regions allowed for process usage
         + credentials (inherited from user's access rights)
      and other attributes

      process atributes: 
         > pid ( + ppid )
         > memory and registers state
         > return code
      keep in simple struct in memory - after process is ended,
      struct and process finally destroyed when parent process 
      requests for return code of process 
      
      process-zombie

      if parent of the process is destroyed before,
      the init process becomes parent


   9. fork() = create new process >> man 2 fork

      > process is copy of parent process
        differences: 
         - different PID, PPID
         - doesn't inherit memory locks
                           signals in wait state
                           timers

      > starts execution of the same binary file from the next line, but
        returns value in the child process as well. Peculiarity:
         - return value in parent process = child PID
         - return value in chald process = 0
         - if not succeed return value in parent process = -1 


  10. exec() = number of functions to create new process >> man 3 exec
      corresponding syscall is execve() >> man 2 execve 

      > process has all of attributes are differed from parent
      > new process replaces current process
      > new process might be created as an
         - execution of executable ( = binary ) file
         - running script ( in this case it requires interpretator as one of arguments )
      > if execve() failed :
         - return code = -1
         - errno is set to appropriate error state


   11. clone() = create new process with particular attributes >> man 2 clone

      > process is copy of parent process, but 
        state of some attributes might be set manually:
         - open files
         - file namespace ( process' root filesystem = part of entire filesystem )
         - input-output operations
         - network environment, hostname
         - processes identificators spaces (container virtualization)
         - memory and registers
         - ...

 
   12. daemons

      order to create daemon:

      [a] in parent process
          > fork() = create child process
          > do logic or kill parent process
      [b] in child process:
          > setsid()             =  create new session ID for daemon process (parent process would be 'systemd')
          > umask(int)           =  give necessary permissions 
          > chdir("dirpath")     =  go to necessary directory
          > signal( ... )        =  setup signals handlers
          > close( ... )         =  close std input, output, error (+ and all files as well)
      
      or [man 3 daemon] might be used to detach current process from 
      the controlling terminal and run in the background as system daemons

   13. tasks for 'Processes and treads are done'

   14. IPC = inter-process communication, local

       [A] = (un)named pipes

         pipe and read(): 
         
            1. after READER opened pipe, pipe is in blocking mode, until WRITER open the same pipe
            2. while WRITER and READER are on the same pipe, read() works in such mode:
               > read data from pipe, if there are in it
               > wait for data, if pipe is empty
            3. after WRITER closes pipe and READER is alone, read() returns 0 value
         
         flow:
         
         >  READER requests to open pipe 
         >  READER is in blocking mode
         >                                   WRITER opens pipe
         >  READER unblocked, pipe opened
         >  ------------------------- loop ----------------------------
            read() waits for data in pipe 
                                             write() sends data to pipe
            read() gets data from pipe
            -----------------------------------------------------------
         >                                   WRITER closes pipe
         >  read() worsk in regular mode
         >  read() gets 0 value

         best way to use special read() mode is to put it into while loop:
         while( read( ... ) ) ...      so if WRITER closes pipe, loop ends

      ! named pipe might be opened by READER in read-write mode =
        so there are always one fictive writer and real writers might
        come ane leave in any time without effecting to read() behavior

      ! popen() includes at the bottom level : pipe() + fork()

       [B] = message queues (man mq_open , man mq_send , ... )

       [C] = signals

         signal = interrupt process to run specific logic
         <signal.h> to know entire list of signals

         every programm has default signal handler module, 'added' in linkage process
         almost all signal handlers might be overloaded by programm author
         excepttion: SIGKILL (9) , SIGSTOP (19)

         > kill()    send signal to process     man 2 kill
         > signal()  defilne signal handler     man 2 signal
         
       [D] = shared memory

         every process has shared memory (SM) segment in it's virtual space
         SM is used for:
            - shared library usage
            - shared memory access
         
         shared memory approach means 
            - some virtual adresses of defferent processes ...
            - ... are mapped to the same physical memory space

         functions:
            - shmget() = get
            - shmat()  = attach
            - shmdt()  = detach
            - shmctl() = control
            - ...
         
         to see current shared areas in system:
         ~ ipcs     # '-m' option to see only shared memory

       [E] = POSIX semaphore

       [F] = RPC = remote procedure call (man rpc)

       [G] = input/output multiplexing

         prevent program, using named pipe, from blocking on write() or read() instruction ...
         ... if writing (full buffer) or reading (empty buffer) is impossble.

         every process by default gets 3 opened files (file descriptor - file):
         1 - stdin
         2 - stdout
         3 - stderr

         file descriptors  (value)  :  ... (4)(3)(2)(1)(0)  
         fd_set watch_list (value)  :  ...  0  1  1  0  1   -<--  1 means file descriptor should be tracked
                           ( bits)  :  ... [4][3][2][1][0]  
         
         void FD_ZERO(fd_set*)       =  reset all bits in fd_set 
         void FD_SET(fd, fd_set*)    =  set corresponding bit in 1
         void FD_CLR(fd, fd_set*)    =  set corresponding bit in 0
         int  FD_ISSET(fd, fd_set*)  =  check state of cerresponding bit
 
         // allow to monitor multiple file descriptors, waiting until at least one becomes ready 
         int select(int max_fd_count, fd_set* read_watch_list, fd_set* write_watch_list, fd_set* exception_watch_list, struct timeval* timeout);

   15. IPC = inter-process communication, network

      TCP/IP stack: 
      > APPLICATION LAYER       =  SMTP, TELNET (FTP, HTTP ...), DNS ...
      > TANSPORT LAYER          =  UDP or TCP
      > INTERNET LAYER          =  IP, ICMP, ARP ...
      > LINK (physical) LAYER   =  Wi-Fi, Ethernet ...

      SOFTWARE STACK = 
      > user
      > OS (socket interface to user)
      > drivers (for transport + internet + link layers)
      > hardware

      IP and SUBNET MASK = xxx.xxx.xxx.xxx / mm , e.g. 
      192.168.33.1 / 20
             ip   11000000 10101000 0010001 00000001
           mask   11111111 11111111 1111000 00000000
         subnet   11000000 10101000 0010000 00000000 = 192.168.32.0
           host   00000000 00000000 0000001 00000001 = 0.0.1.1 
          range                                        0.0.0.1 - 0.0.15.254 (0.0.15.255 = broadcast IP)
     
      Logical parts of IP protocol:
         > packet configure  -<-- only IP adresse (!without mask)
         > routing task      -<-- mask usage for deside if Destination IP is in Source IP subnet
      If Destination IP out of Source IP subnet, source host sends packet to DEFAULT GATAWAY
      Source host -->- Default gateway (routing task) -->- ... -->- Destination host

      COMMUNICATION TYPES:
         > unicast = point to point
         > multicast = point to broadcast group
         > broadcast = point to all

      TCP = transmission control protocol ( high-latency , non-loss-toleranting , order-guarantee      =  primary host-to-host )
      UDP = user datagram protocol        ( low-latency  , loss-tolerating      , non-order-guarantee  =  primary proc-to-proc )

      SOCKET give abstraction of:
      - network adress (adresses' and network structure)
      - transport ( ??? )
      - i/o base operations (open=connect - close=disconnect - write=send - read=recieve)

      GENERAL structure of SOCKET on client / server

      client                           server

                        UDP

      socket() ...................... socket()
      bind() ........................ bind()
      sendto() ..>................>.. recvfrom()
      recvfrom ..<................<.. sendto()

                        TCP

      socket() ...................... socket()  (socket to establish connection)
      bind() ........................ bind()
                                      listen()
      connect()                       
                                      accept()  (* see comments below)
      send() ..>..................>.. recv()
      recv ..<....................<.. send()


      USEFUL LINUX UTILITIES > broadcast = point to all

      TCP = transmission control protocol ( high-latency , non-loss-toleranting , order-guarantee      =  primary host-to-host )
      UDP = user datagram protocol        ( low-latency  , loss-tolerating      , non-order-guarantee  =  primary proc-to-proc )

      SOCKET give an abstraction of:
      - network adress (adresses' and network structure)
      - transport ( ??? )
      1. netstat = statistic of sockets
      2. netcat = creat client / server 

   *  accept comment. Accept creates new socket for data exchange and associates 
      it with client socket unisg 4 parameters:
         - server IP 
         - server port
         - client IP
         - client port
      Every unique combination corresponds only one [client socket, server socket] pair. So
      server might handle connections to the same port until client side use
         - or different IP
         - or different port
      [!] Note that after socket was bound it can't be bind() again.       
          This is true both for explicit and implicit bindings.  

   16. getopt() = handle command line arguments (man 3 getopt)       